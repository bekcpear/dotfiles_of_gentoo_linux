# Lines configured by zsh-newuser-install
setopt extended_history
HISTFILE=~/.histfile
HISTSIZE=1000000
SAVEHIST=100000
bindkey -v
KEYTIMEOUT=1
# End of lines configured by zsh-newuser-install

LS_COLORS=$( cat ~/.local/share/LS_COLORS/snazzy.txt )
export LS_COLORS

zstyle ':completion:*' completer _complete _ignored _approximate
zstyle ':completion:*' expand prefix
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*:descriptions' format '%U%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' ignore-parents parent pwd
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '' 'm:{[:lower:]}={[:upper:]}'
zstyle ':completion:*' max-errors 0 not-numeric
zstyle ':completion:*' original true
zstyle ':completion:*' preserve-prefix '//[^/]##/'
zstyle ':completion:*' squeeze-slashes true
zstyle :compinstall filename '~/.zshrc'

# End of lines added by compinstall
autoload -Uz compinit promptinit vcs_info
compinit
promptinit

bindkey "^R" history-incremental-search-backward

#auto change current directory( /etc instead of cd /etc )
setopt autocd
#satisfy standard bash-like globbing
setopt extendedglob

#autoload -Uz add-zsh-hook
#function xterm_title_precmd () {
#  print -Pn '\e]0;%n@%m:%1~\a'
#}
#function xterm_title_preexec () {
#  print -Pn "\e]0;%#> ${(p)1} | %n@%m:%1~\a"
#}
#add-zsh-hook -Uz precmd xterm_title_precmd
#add-zsh-hook -Uz preexec xterm_title_preexec

#highlight
source /usr/share/zsh/site-functions/zsh-syntax-highlighting.zsh
#autosuggestions
source /usr/share/zsh/site-functions/zsh-autosuggestions.zsh

zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-staged-changes true
zstyle ':vcs_info:*' stagedstr "*"
zstyle ':vcs_info:*' actionformats '%K{233} ᚠ %b%F{2}%c%f %k%K{3} %F{233}%a%f %k'
zstyle ':vcs_info:*' formats '%K{233} ᚠ %b%F{2}%c%f %k'
precmd () {
  local _last_ret=$?
  # show last run status
  local _color=209
  if [[ ${_last_ret} != 0 ]]; then
    case ${_last_ret} in
      130)
        _last_ret="^C" # ⌃ for Mac
        _color=212
        ;;
      *)
        ;;
    esac
    # printf "\x1b[38;5;%dm\x1b[0m" ${_color}
    # printf "\x1b[48;5;%dm  ⇑↑⇑⇡☝︎⬆︎⇧⇪⥣↟↾↿⥔⥘⥜⥠⟰⤊↥⇫⇬⇭⇮⇯⇈⤉⇞⤒⥉⇱↸⤴︎ ⤤⤻➚%s  \x1b[0m" ${_color} ${_last_ret}
    printf "\x1b[48;5;%dm  ⤒%s   \x1b[0m" ${_color} ${_last_ret}
    printf "\n"
    # printf "\x1b[38;5;%dm\x1b[0m\n" ${_color}
  fi

  # prepare vcs info
  vcs_info
  if [[ -n ${vcs_info_msg_0_} ]]; then
    RPROMPT="${vcs_info_msg_0_} ${D_RPROMPT}"
  else
    RPROMPT="${D_RPROMPT}"
  fi
}
setopt prompt_subst
PROMPT='%F{238}${(l:${COLUMNS}::·:):-}%f\
 %F{227}%~%f %B%F{123}›%f %b'
D_RPROMPT=" %F{238}%* @%D{%f}%f"

export GOPATH=~/go
export PATH=$PATH":/home/ryan/go/bin:/home/ryan/.local/bin"

export GPG_TTY="$(tty)"
#if [[ -z ${SSH_CLIENT} ]]; then
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
gpg-connect-agent updatestartuptty /bye >/dev/null
#fi
#gpgconf --launch gpg-agent

alias yd=ydcv-rs
#alias pb=~/Nextcloud/Documents/Linux/Scripts/uGtCustomScripts/vimcnpaste.sh
alias myscreenkey="screenkey --opacity 0.6 -t0.5 --bak-mode normal -M -p fixed -g \$(slop -n -f '%g')"
alias gh="proxychains -q gh"
alias checkmyebuilds="${HOME}/Programs/Scripts/repomancheckmines.sh"
. ~/myykid
alias yk5cnfc="ykman --device ${_YK5CNFC}"
alias yk5nfc="ykman --device ${_YK5NFC}"
alias v="vim"
#alias pb="~/Programs/Scripts/pb.sh"

export FCITX_SOCKET=/tmp/fcitx-socket-:0

source /home/ryan/.config/broot/launcher/bash/br

# print the average emerge time for the given pkg and it's dependencies
eaveragetime() {
  echo "Calculating depgraph ..."
  equery -Cq g --depth=${2:-1} -lAMU ${1} | cut -d']' -f2 | sed -E '/:$/d;/^[[:space:]]*$/d;s/-[[:digit:]].*//' | xargs qlop -a `<<<"${pkgs}"` | sed -E 's/^(.*):\s+([^ ]*)\s.*/\2 \1/' | awk -v depth=${2:-1} -v pkg=${1} 'BEGIN {tt=0} { if ($1 ~ /′/) { match($1, /([[:digit:]]+)′([[:digit:]]+)″.*/, arr); t=((arr[1] * 60 ) + arr[2] ); print t"s "$2 } else if ($1 ~ /:/) { match($1, /([[:digit:]]+):([[:digit:]]+):([[:digit:]]+)/, arr); t=((arr[1] * 3600) + (arr[2] * 60) + arr[3]); print t"s "$2 } else { match($1, /([[:digit:]]+)s/, arr); t=arr[1]; print $0 } tt+=t } END {s=tt%60; m=(tt-s)%3600/60; h=(tt-m*60-s)/3600; print "=== total: "h":"m":"s" (pkg: "pkg", deps: "NR - 1", depth: "depth") ==="}' | sort -n | awk '{if (NR != 1) print $0; else tip=$0} END {print tip}'
}

alias p="proxychains -q"

alias krv="ekeyword '~riscv'"
alias rvlo="/mnt/gentoo-test/riscv/chroot.sh"
alias rvcd="/mnt/gentoo-test/riscv/pushDir.sh"
alias rvpa="/mnt/gentoo-test/riscv/doPatch.sh"

alias rg="rg --no-ignore"
run() {
  (
  set -e
  f=${1%.c}
  f=${f%.cpp}
  if [[ -e $f ]]; then
    set -- rm $f
    echo ">>> ""$@"
    $@
  fi
  set -- make $f
  echo ">>> ""$@"
  $@
  echo
  ./$f
  )
}
clrun() {
  local CC CXX
  export CC="clang"
  export CXX="clang++"
  run "$@"
}

build_cryptpad() {
  (
  set -xe
  _P=$(pwd)
  proxychains -q npm install --production
  pushd ..
  mkdir bower
  cd bower
  yarn add bower
  popd
  proxychains -q ../bower/node_modules/bower/bin/bower install -p
  cd ~/Git/cryptpad-release
  rm -rf node_modules www
  cp -a ${_P}/{node_modules,www/bower_components} ./
  mkdir www
  mv bower_components www
  git status
  )
}

if [[ $(pwd) == "/" ]]; then
  cd
fi

alias nct="~/Git/network-connectivity-test/nct"
alias vgen="~/Git/vendor-for-go/gen.sh"
alias go="https_proxy='socks5://127.0.0.1:1080' go"
alias golic="https_proxy='socks5://127.0.0.1:1080' ~/Git/go-licenses-for-gentoo/golic.sh"
alias govenball="https_proxy='socks5://127.0.0.1:1080' ~/Git/vendor-for-go/.do/do.sh ~/Git/gopkg-vendors"
alias ls="ls --color"
alias vim="nvim"
alias insfunc="~/Git/bash-funcs/ins.sh"
