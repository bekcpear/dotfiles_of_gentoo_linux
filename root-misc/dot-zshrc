# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=100000
bindkey -v
KEYTIMEOUT=1
# End of lines configured by zsh-newuser-install

zstyle :compinstall filename '/home/ryan/.zshrc'

autoload -Uz compinit promptinit
compinit
promptinit; prompt gentoo

zstyle ':completion::complete:*' use-cache 1
zstyle ':completion:*:descriptions' format '%U%d%b%u'
zstyle ':completion:*:warnings' format '%BSorry, no matches for: %d%b'

#auto change current directory( /etc instead of cd /etc )
setopt autocd
#satisfy standard bash-like globbing
setopt extendedglob

#autoload -Uz add-zsh-hook
#function xterm_title_precmd () {
#  print -Pn '\e]0;%n@%m:%1~\a'
#}
#function xterm_title_preexec () {
#  print -Pn "\e]0;%#> ${(p)1} | %n@%m:%1~\a"
#}
#add-zsh-hook -Uz precmd xterm_title_precmd
#add-zsh-hook -Uz preexec xterm_title_preexec

#highlight
source /usr/share/zsh/site-functions/zsh-syntax-highlighting.zsh
#autosuggestions
source /usr/share/zsh/site-functions/zsh-autosuggestions.zsh

setopt prompt_subst
PROMPT='%F{238}${(l:${COLUMNS}::·:):-}%f\
 %B%F{11}%~%f %# %(?.%F{154}»%f%F{190}»%f%F{226}»%f.%F{124}»%f%F{160}»%f%F{196}»%f) %b'
RPROMPT=" %F{238}%* @%D{%f}%f"

#export GOPATH=~/go

function _notify_lr() {
  print -P '%F{238}${(l:${COLUMNS}::·:):-}%f'
  print -P '%F{6}=== Done! Run "emerge -vj @live-rebuild" to update live pkgs?%f'
}

alias ssu='\
	tmux start-server;\
	tmux new-session -ds ssu -y -;\
	tmux split-window -dl3;\
	tmux split-window -dbl11;\
	tmux send-keys -tssu:0.0 "htop" C-m;\
	tmux send-keys -tssu:0.1 "emerge -ajvuDN @world && _notify_lr" C-m;\
	tmux send-keys -tssu:0.2 "watch -n 1 qlop -Htvr" C-m;\
	tmux attach -tssu'

alias ssuy='\
	tmux start-server;\
	tmux new-session -ds ssuy -y -;\
	tmux split-window -dl3;\
	tmux split-window -dbl11;\
	tmux send-keys -tssuy:0.0 "htop" C-m;\
	tmux send-keys -tssuy:0.1 "emerge -jvuDN @world && _notify_lr" C-m;\
	tmux send-keys -tssuy:0.2 "watch -n 1 qlop -Htvr" C-m;\
	tmux attach -tssuy'

alias essunoti="su -c 'notify-send -u critical \"Pretend emerge DONE\" \"emerge -pvuDN @world done.\"' - ryan"
alias essu='\
	tmux start-server;\
	tmux new-session -ds essu -y -;\
	tmux split-window -dl3;\
	tmux split-window -dbl11;\
	tmux send-keys -tessu:0.0 "htop" C-m;\
	tmux send-keys -tessu:0.1 "esync && emerge -pvuDN @world; essunoti" C-m;\
	tmux send-keys -tessu:0.2 "watch -n 1 qlop -Htvr" C-m;\
	tmux attach -tessu'

alias testEbuilds.sh='/home/ryan/Git/testEbuilds/testEbuilds.sh'
alias cleanAll.sh='/home/ryan/Git/testEbuilds/.tool/cleanAll.sh'
alias updateBaseSnapshots.sh='/home/ryan/Git/testEbuilds/.tool/updateBaseSnapshots.sh'
alias rvmk="/mnt/gentoo-test/riscv/createRootFS.sh"
alias rvrm="/mnt/gentoo-test/riscv/deleteRootFS.sh"
alias rvlo="/mnt/gentoo-test/riscv/chroot.sh"
alias rvcd="/mnt/gentoo-test/riscv/pushDir.sh"
alias rvpa="/mnt/gentoo-test/riscv/doPatch.sh"

alias tf="tail -f"

precmd() {
  local _last_ret=$? extra_info
  local tts=$(date '+%s.%N')

  # show last run status
  local _color=209
  if [[ ${_last_ret} != 0 ]]; then
    case ${_last_ret} in
      130)
        _last_ret="^C" # ⌃ for Mac
        _color=212
        ;;
      *)
        ;;
    esac
    # printf "\x1b[38;5;%dm\x1b[0m" ${_color}
    # printf "\x1b[48;5;%dm  ⇑↑⇑⇡☝︎⬆︎⇧⇪⥣↟↾↿⥔⥘⥜⥠⟰⤊↥⇫⇬⇭⇮⇯⇈⤉⇞⤒⥉⇱↸⤴︎ ⤤⤻➚%s  \x1b[0m" ${_color} ${_last_ret}
    printf -v extra_info "\x1b[48;5;%dm  ⤒%s   \x1b[0m" ${_color} ${_last_ret}
    # printf "\x1b[38;5;%dm\x1b[0m\n" ${_color}
  fi

  # show consumption time
  if [[ -n $ltts ]]; then
    local -i hour min sec nano
    sec=$(( ${tts%.*} - ${ltts%.*} ))
    nano=$(( ${tts#*.} - ${ltts#*.} ))
    ltts=
    if (( $nano < 0 )); then
      (( sec=$sec - 1 ))
      (( nano=$nano + 1000000000 ))
    fi
    if (( $sec > 60 )); then
      min=$(( sec / 60 ))
      sec=$(( sec % 60 ))
      if (( $min > 60 )); then
        hour=$(( min / 60 ))
        min=$(( min % 60 ))
      fi
    fi
    local i t=$nano
    for (( i=0; i < $(( 9 - ${#nano} )); i++ )); do
      t="0"$t
    done
    t=.${t:0:6}
    (( $sec  > 0 )) && t="${sec}\" ${t}"
    (( $min  > 0 )) && t="${min}' ${t}"
    (( $hour > 0 )) && t="${hour}hr ${t}"
    printf -v extra_info "\x1b[48;2;251m\x1b[48;5;233m\x1b[3m  %s  \x1b[0m%s" "$t" "$extra_info"
  fi

  if [[ -n $extra_info ]]; then
    printf "%s\n" "$extra_info"
  fi
}
typeset -g ltts
preexec() {
  ltts=$(date '+%s.%N')
}

